pub mod stream {
    #![allow(non_camel_case_types)]

    use windows::Win32::Graphics::{Direct3D12::*, Dxgi::Common::*};

    #[cfg(test)]
    macro_rules! add_pair {
        ($o:expr,$val:expr,$typ:ty,$size:expr,$off:expr) => {
            $o.push(($val, std::any::TypeId::of::<$typ>(), $size, $off));
        };
    }

    #[cfg(test)]
    fn check_pair(ty: D3D12_PIPELINE_STATE_SUBOBJECT_TYPE, val: std::any::TypeId, size: usize, off: usize) {
        let mut vec: Vec<(D3D12_PIPELINE_STATE_SUBOBJECT_TYPE, std::any::TypeId, usize, usize)> = Vec::new();

        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE, ID3D12RootSignature, 16, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS, D3D12_SHADER_BYTECODE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS, D3D12_SHADER_BYTECODE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS, D3D12_SHADER_BYTECODE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS, D3D12_SHADER_BYTECODE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS, D3D12_SHADER_BYTECODE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS, D3D12_SHADER_BYTECODE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT, D3D12_STREAM_OUTPUT_DESC, 40, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND, D3D12_BLEND_DESC, 336, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK, u32, 8, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER, D3D12_RASTERIZER_DESC, 48, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL, D3D12_DEPTH_STENCIL_DESC, 56, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT, D3D12_INPUT_LAYOUT_DESC, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE, D3D12_INDEX_BUFFER_STRIP_CUT_VALUE, 8, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY, D3D12_PRIMITIVE_TOPOLOGY_TYPE, 8, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS, D3D12_RT_FORMAT_ARRAY, 40, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT, DXGI_FORMAT, 8, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC, DXGI_SAMPLE_DESC, 16, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK, D3D12_NODE_MASK, 8, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK, u32, 8, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO, D3D12_CACHED_PIPELINE_STATE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS, D3D12_PIPELINE_STATE_FLAGS, 8, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1, D3D12_DEPTH_STENCIL_DESC1, 64, 4);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING, D3D12_VIEW_INSTANCING_DESC, 32, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS, D3D12_SHADER_BYTECODE, 24, 8);
        add_pair!(vec, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS, D3D12_SHADER_BYTECODE, 24, 8);

        if let None = vec.into_iter().find(|(a, b, c, d)| *a == ty && *b == val && *c == size && *d == off) {
            panic!("The pair is not valid.")
        }
    }

    macro_rules! def {
        ($name:ident,$val:expr,$typ:ty,$test:ident) => {
            #[repr(C, align(8))]
            pub struct $name {
                ty: D3D12_PIPELINE_STATE_SUBOBJECT_TYPE,
                v: $typ,
            }
            impl $name {
                pub fn new(v: $typ) -> Self {
                    Self { ty: $val, v }
                }
            }
            #[test]
            fn $test() {
                check_pair($val, std::any::TypeId::of::<$typ>(), std::mem::size_of::<$name>(), std::mem::offset_of!($name, v));
                assert_eq!(std::mem::align_of::<$name>(), 8);
            }
        };
    }

    def!(CD3DX12_PIPELINE_STATE_STREAM_FLAGS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS, D3D12_PIPELINE_STATE_FLAGS, t1);
    def!(CD3DX12_PIPELINE_STATE_STREAM_NODE_MASK, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK, u32, t2);
    def!(CD3DX12_PIPELINE_STATE_STREAM_ROOT_SIGNATURE, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE, ID3D12RootSignature, t3);
    def!(CD3DX12_PIPELINE_STATE_STREAM_INPUT_LAYOUT, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT, D3D12_INPUT_LAYOUT_DESC, t4);
    def!(CD3DX12_PIPELINE_STATE_STREAM_IB_STRIP_CUT_VALUE, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE, D3D12_INDEX_BUFFER_STRIP_CUT_VALUE, t5);
    def!(CD3DX12_PIPELINE_STATE_STREAM_PRIMITIVE_TOPOLOGY, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY, D3D12_PRIMITIVE_TOPOLOGY_TYPE, t6);
    def!(CD3DX12_PIPELINE_STATE_STREAM_VS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS, D3D12_SHADER_BYTECODE, t7);
    def!(CD3DX12_PIPELINE_STATE_STREAM_GS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS, D3D12_SHADER_BYTECODE, t8);
    def!(CD3DX12_PIPELINE_STATE_STREAM_STREAM_OUTPUT, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT, D3D12_STREAM_OUTPUT_DESC, t9);
    def!(CD3DX12_PIPELINE_STATE_STREAM_HS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS, D3D12_SHADER_BYTECODE, t10);
    def!(CD3DX12_PIPELINE_STATE_STREAM_DS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS, D3D12_SHADER_BYTECODE, t11);
    def!(CD3DX12_PIPELINE_STATE_STREAM_PS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS, D3D12_SHADER_BYTECODE, t12);
    def!(CD3DX12_PIPELINE_STATE_STREAM_AS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS, D3D12_SHADER_BYTECODE, t13);
    def!(CD3DX12_PIPELINE_STATE_STREAM_MS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS, D3D12_SHADER_BYTECODE, t14);
    def!(CD3DX12_PIPELINE_STATE_STREAM_CS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS, D3D12_SHADER_BYTECODE, t15);
    def!(CD3DX12_PIPELINE_STATE_STREAM_BLEND_DESC, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND, D3D12_BLEND_DESC, t16);
    def!(CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL, D3D12_DEPTH_STENCIL_DESC, t17);
    def!(CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL1, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1, D3D12_DEPTH_STENCIL_DESC1, t18);
    def!(CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL_FORMAT, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT, DXGI_FORMAT, t19);
    def!(CD3DX12_PIPELINE_STATE_STREAM_RASTERIZER, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER, D3D12_RASTERIZER_DESC, t20);
    def!(CD3DX12_PIPELINE_STATE_STREAM_RENDER_TARGET_FORMATS, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS, D3D12_RT_FORMAT_ARRAY, t21);
    def!(CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_DESC, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC, DXGI_SAMPLE_DESC, t22);
    def!(CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_MASK, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK, u32, t23);
    def!(CD3DX12_PIPELINE_STATE_STREAM_CACHED_PSO, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO, D3D12_CACHED_PIPELINE_STATE, t24);
    def!(CD3DX12_PIPELINE_STATE_STREAM_VIEW_INSTANCING, D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING, D3D12_VIEW_INSTANCING_DESC, t25);

    #[allow(non_snake_case)]
    #[repr(C)]
    pub struct CD3DX12_PIPELINE_MESH_STATE_STREAM {
        pub Flags: CD3DX12_PIPELINE_STATE_STREAM_FLAGS,
        pub NodeMask: CD3DX12_PIPELINE_STATE_STREAM_NODE_MASK,
        pub pRootSignature: CD3DX12_PIPELINE_STATE_STREAM_ROOT_SIGNATURE,
        pub PrimitiveTopologyType: CD3DX12_PIPELINE_STATE_STREAM_PRIMITIVE_TOPOLOGY,
        pub PS: CD3DX12_PIPELINE_STATE_STREAM_PS,
        pub AS: CD3DX12_PIPELINE_STATE_STREAM_AS,
        pub MS: CD3DX12_PIPELINE_STATE_STREAM_MS,
        pub BlendState: CD3DX12_PIPELINE_STATE_STREAM_BLEND_DESC,
        pub DepthStencilState: CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL1,
        pub DSVFormat: CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL_FORMAT,
        pub RasterizerState: CD3DX12_PIPELINE_STATE_STREAM_RASTERIZER,
        pub RTVFormats: CD3DX12_PIPELINE_STATE_STREAM_RENDER_TARGET_FORMATS,
        pub SampleDesc: CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_DESC,
        pub SampleMask: CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_MASK,
        pub CachedPSO: CD3DX12_PIPELINE_STATE_STREAM_CACHED_PSO,
        pub ViewInstancingDesc: CD3DX12_PIPELINE_STATE_STREAM_VIEW_INSTANCING,
    }

    #[test]
    fn t26() {
        assert_eq!(std::mem::size_of::<CD3DX12_PIPELINE_MESH_STATE_STREAM>(), 688);
        assert_eq!(std::mem::align_of::<CD3DX12_PIPELINE_MESH_STATE_STREAM>(), 8);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, Flags), 0);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, NodeMask), 8);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, pRootSignature), 16);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, PrimitiveTopologyType), 32);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, PS), 40);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, AS), 64);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, MS), 88);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, BlendState), 112);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, DepthStencilState), 448);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, DSVFormat), 512);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, RasterizerState), 520);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, RTVFormats), 568);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, SampleDesc), 608);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, SampleMask), 624);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, CachedPSO), 632);
        assert_eq!(std::mem::offset_of!(CD3DX12_PIPELINE_MESH_STATE_STREAM, ViewInstancingDesc), 656);
    }
}
